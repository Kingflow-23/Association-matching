# -*- coding: utf-8 -*-

# WARNING: Do not edit this file unless you know what you are doing !!

## Make good usage of our work (remember to be indulgent when facing bugs, we're just 2nd year students ...)

from PyQt5 import QtCore, QtGui, QtWidgets
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
import time
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.common.exceptions import (
    StaleElementReferenceException,
    ElementNotInteractableException,
)
from time import sleep
import openpyxl
import pandas as pd
from openai import OpenAI


class LocalOpenAI:
    def __init__(self):
        self.client = OpenAI(base_url="http://localhost:1234/v1", api_key="lm-studio")
        self.model = "TheBloke/Mistral-7B-Instruct-v0.1-GGUF/mistral-7b-instruct-v0.1.Q4_K_S.gguf"

    def extraction_nom_fondation(self, texte):

        user_message = f"Dans le texte : {texte}, quel est le nom de cette fondation ?"

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_zone_géographique(self, texte):

        user_message = f"Dans le texte : {texte}, quel est la zone géographique / pays dans lequel la fondation fait intervention"

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_informations_cles(self, texte):
        user_message = f"Dans le texte : {texte}, donne moi les informations clés qui pourraient permettre à une association de savoir si elle pourrait postuler à l appel d offre que mettra en place cette fondation."

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.4,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_date_butoire(self, texte):

        user_message = (
            f"Dans le texte : {texte}, donne la date butoire pour déposer un dossier."
        )

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.2,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_type_de_financeur(self, texte):

        user_message = f'Dans le texte : {texte}, Parmi les types de financeurs suivants : ["Fondation d entreprise", "Fonds de dotation", "Fond public", "Institution publique", "Fondation familiale"] lequel correspond le plus à la fondation présentée dans le texte, répond en ne donnant que l un des possibles types fournis'

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.2,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_nom_appel(self, texte):

        user_message = f'Dans le texte : {texte}, S il est mentionné le nom d appel mis en place par la fondation, réponds en donnant uniquement le nom d appel, sinon écrit uniquement "Non metionné"'

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_champs_intervention(self, texte):

        user_message = f"Dans le texte : {texte}, Retourne moi sous forme de liste, sans rien ajouter de plus, les 3 champs d interventions principaux de la fondation"

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_criteres_cles(self, texte):

        user_message = f'Dans le texte : {texte}, S il est mentionnné des conditions / critères clés que l association désireuse de candidater doit vérifier, reponds uniquement en les donnant de facon concises, sinon écrit uniquement "Non metionné"'

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_parrainage(self, texte):

        user_message = f'Dans le texte : {texte}, S il est mentionnné l obligation d avoir un parrain ou une marraine pour déposer un dossier, Réponds uniquement "Oui" , sinon écrit uniqement "Non metionné"'
        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_don(self, texte):

        user_message = f'Dans le texte : {texte}, S il est mentionnné le Don ou la subvention potentiel(le) ou moyen(ne) que peut fournir la fondation pour un projet donné, réponds uniquement en donnant son montant, sinon écrit uniquement "Non metionné"'

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    ## Contact

    def extraction_tel(self, texte):

        user_message = f'Dans le texte : {texte}, S il est mentionnné le numéro de téléphone de la fondation, réponds uniquement en le donnant, sinon écrit uniquement "Non metionné"'

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_mail(self, texte):

        user_message = f'Dans le texte : {texte}, S il est mentionnné le mail de la fondation, réponds uniquement en le donnant, sinon écrit uniquement "Non metionné"'

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    ## Processus

    def extraction_processus(self, texte):

        user_message = f'Dans le texte : {texte}, S il est mentionnné un processus de dépot et de traitement de dossier ? Réponds en le résumant le plus clairement et brièvement possible, sinon écrit uniquement "Non metionné"'
        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_janvier(self, texte):

        user_message = f'Dans le texte : {texte}, S il est mentionnné qu une association peut déposer un dossier de candidature spécifiquement en Janvier, écrits uniquement "Oui", sinon écrit uniquement "Non"'

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable. Sois le plus strict et précis possible.",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_fevrier(self, texte):

        user_message = f'Dans le texte : {texte}, S il est mentionnné qu une association peut déposer un dossier de candidature spécifiquement en Février , écrits uniquement "Oui", sinon écrit uniquement "Non"'

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable. Sois le plus strict et précis possible.",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_mars(self, texte):

        user_message = f'Dans le texte : {texte}, S il est mentionnné qu une association peut déposer un dossier de candidature spécifiquement en Mars, écrits uniquement "Oui", sinon écrit uniquement "Non"'

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable. Sois le plus strict et précis possible.",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_avril(self, texte):

        user_message = f'Dans le texte : {texte}, S il est mentionnné qu une association peut déposer un dossier de candidature spécifiquement en Avril, écrits uniquement "Oui", sinon écrit uniquement "Non"'

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable. Sois le plus strict et précis possible.",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_mai(self, texte):

        user_message = f'Dans le texte : {texte}, S il est mentionnné qu une association peut déposer un dossier de candidature spécifiquement en Mai, écrits uniquement "Oui", sinon écrit uniquement "Non"'

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable. Sois le plus strict et précis possible.",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_juin(self, texte):

        user_message = f'Dans le texte : {texte}, S il est mentionnné qu une association peut déposer un dossier de candidature spécifiquement en Juin, écrits uniquement "Oui", sinon écrit uniquement "Non"'

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable. Sois le plus strict et précis possible.",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_juillet(self, texte):

        user_message = f'Dans le texte : {texte}, S il est mentionnné qu une association peut déposer un dossier de candidature spécifiquement en Juillet, écrits uniquement "Oui", sinon écrit uniquement "Non"'

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable. Sois le plus strict et précis possible.",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_aout(self, texte):

        user_message = f'Dans le texte : {texte}, S il est mentionnné qu une association peut déposer un dossier de candidature spécifiquement en Août, écrits uniquement "Oui", sinon écrit uniquement "Non"'

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable. Sois le plus strict et précis possible.",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_septembre(self, texte):

        user_message = f'Dans le texte : {texte}, S il est mentionnné qu une association peut déposer un dossier de candidature spécifiquement en Septembre, écrits uniquement "Oui", sinon écrit uniquement "Non"'

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable. Sois le plus strict et précis possible.",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_octobre(self, texte):

        user_message = f'Dans le texte : {texte}, S il est mentionnné qu une association peut déposer un dossier de candidature spécifiquement en Octobre, écrits uniquement "Oui", sinon écrit uniquement "Non"'

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable. Sois le plus strict et précis possible.",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_novembre(self, texte):

        user_message = f'Dans le texte : {texte}, S il est mentionnné qu une association peut déposer un dossier de candidature spécifiquement en Novembre, écrits uniquement "Oui", sinon écrit uniquement "Non"'

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable. Sois le plus strict et précis possible.",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_décembre(self, texte):

        user_message = f'Dans le texte : {texte}, S il est mentionnné qu une association peut déposer un dossier de candidature spécifiquement en Décembre, écrits uniquement "Oui", sinon écrit uniquement "Non"'

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable. Sois le plus strict et précis possible.",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_libre(self, texte):

        user_message = f'Dans le texte : {texte}, S il est mentionnné qu une association peut déposer un dossier de candidature spécifiquement à tout moment, écrits uniquement "Oui", sinon écrit uniquement "Non"'

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable. Sois le plus strict et précis possible.",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content

    def extraction_mentionné(self, texte):

        user_message = f'Dans le texte : {texte}, S il est mentionnné une période dans laquelle une association peut déposer un dossier, écrits uniquement "Oui", sinon écrit uniquement "Non"'

        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {
                    "role": "system",
                    "content": "Tu es un assistant spécialisé dans la recherche d'aide au financement d'associations très performant et expérimenté. Tu es également extrêmement concis et précis dans tes réponses. Réponds strictement avec l'information demandée, et 'Non mentionné' quand l'information demandée n est pas trouvable. Sois le plus strict et précis possible.",
                },
                {"role": "user", "content": user_message},
            ],
            temperature=0.3,
            max_tokens=100,
            frequency_penalty=0.8,
            presence_penalty=0.8,
        )
        return response.choices[0].message.content


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(2226, 1314)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(234, 230, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(234, 230, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(234, 230, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(234, 230, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        MainWindow.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(10)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(120, 330, 1981, 731))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.del_champ = QtWidgets.QPushButton(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.del_champ.setFont(font)
        self.del_champ.setObjectName("del_champ")
        self.gridLayout.addWidget(self.del_champ, 3, 0, 1, 1)
        self.champ = QtWidgets.QLineEdit(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.champ.setFont(font)
        self.champ.setObjectName("champ")
        self.gridLayout.addWidget(self.champ, 0, 0, 1, 1)
        self.b_champ = QtWidgets.QPushButton(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.b_champ.setFont(font)
        self.b_champ.setObjectName("b_champ")
        self.gridLayout.addWidget(self.b_champ, 1, 0, 2, 1)
        self.b_zone = QtWidgets.QPushButton(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.b_zone.setFont(font)
        self.b_zone.setObjectName("b_zone")
        self.gridLayout.addWidget(self.b_zone, 1, 2, 2, 1)
        self.del_zone = QtWidgets.QPushButton(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.del_zone.setFont(font)
        self.del_zone.setObjectName("del_zone")
        self.gridLayout.addWidget(self.del_zone, 3, 2, 1, 1)
        self.number = QtWidgets.QLineEdit(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.number.setFont(font)
        self.number.setObjectName("number")
        self.gridLayout.addWidget(self.number, 2, 1, 1, 1)
        self.b_number = QtWidgets.QPushButton(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.b_number.setFont(font)
        self.b_number.setObjectName("b_number")
        self.gridLayout.addWidget(self.b_number, 3, 1, 1, 1)
        self.b_run = QtWidgets.QPushButton(self.gridLayoutWidget)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.b_run.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.b_run.setFont(font)
        self.b_run.setObjectName("b_run")
        self.gridLayout.addWidget(self.b_run, 4, 1, 1, 1)
        self.zone = QtWidgets.QLineEdit(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.zone.setFont(font)
        self.zone.setObjectName("zone")
        self.gridLayout.addWidget(self.zone, 0, 2, 1, 1)
        self.path = QtWidgets.QLineEdit(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.path.setFont(font)
        self.path.setObjectName("path")
        self.gridLayout.addWidget(self.path, 0, 1, 1, 1)
        self.b_path = QtWidgets.QPushButton(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.b_path.setFont(font)
        self.b_path.setObjectName("b_path")
        self.gridLayout.addWidget(self.b_path, 1, 1, 1, 1)
        self.statut_2 = QtWidgets.QLineEdit(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.statut_2.setFont(font)
        self.statut_2.setAlignment(QtCore.Qt.AlignCenter)
        self.statut_2.setReadOnly(True)
        self.statut_2.setObjectName("statut_2")
        self.gridLayout.addWidget(self.statut_2, 5, 1, 1, 2)
        self.L_statut = QtWidgets.QLineEdit(self.gridLayoutWidget)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        self.L_statut.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.L_statut.setFont(font)
        self.L_statut.setAlignment(QtCore.Qt.AlignCenter)
        self.L_statut.setReadOnly(True)
        self.L_statut.setObjectName("L_statut")
        self.gridLayout.addWidget(self.L_statut, 5, 0, 1, 1)
        self.title = QtWidgets.QLineEdit(self.centralwidget)
        self.title.setGeometry(QtCore.QRect(120, 50, 1981, 231))
        self.title.setMinimumSize(QtCore.QSize(0, 231))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.title.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(True)
        font.setUnderline(True)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(False)
        self.title.setFont(font)
        self.title.setAlignment(QtCore.Qt.AlignCenter)
        self.title.setReadOnly(True)
        self.title.setObjectName("title")
        self.champ_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.champ_2.setGeometry(QtCore.QRect(1600, 1090, 461, 61))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        self.champ_2.setPalette(palette)
        font = QtGui.QFont()
        font.setBold(True)
        font.setPointSize(16)
        self.champ_2.setFont(font)
        self.champ_2.setAlignment(QtCore.Qt.AlignCenter)
        self.champ_2.setReadOnly(True)
        self.champ_2.setObjectName("champ_2")
        self.champ_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.champ_3.setGeometry(QtCore.QRect(320, 1100, 231, 51))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        self.champ_3.setPalette(palette)
        font = QtGui.QFont()
        font.setBold(True)
        font.setPointSize(16)
        self.champ_3.setFont(font)
        self.champ_3.setAlignment(QtCore.Qt.AlignCenter)
        self.champ_3.setReadOnly(True)
        self.champ_3.setObjectName("champ_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 2226, 31))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.b_champ.clicked.connect(self.add_champ)
        self.b_zone.clicked.connect(self.add_zone)
        self.b_path.clicked.connect(self.get_path)
        self.b_number.clicked.connect(self.get_num)
        self.b_run.clicked.connect(self.run)
        self.del_champ.clicked.connect(self.delete_champ)
        self.del_zone.clicked.connect(self.delete_zone)

        self.fondations = pd.DataFrame()

        self.fondations["Fondations"] = [None]
        self.fondations["Urls"] = [None]
        self.fondations["Textes"] = [None]
        self.fondations["Zones d'interventions"] = [None]
        self.fondations["Informations cles"] = [None]
        self.fondations["Date butoire"] = [None]
        self.fondations["Type de financeur"] = [None]
        self.fondations["Nom de l'appel"] = [None]
        self.fondations["Champs d'intervention"] = [None]
        self.fondations["Criteres cles"] = [None]
        self.fondations["Parrainage"] = [None]
        self.fondations["Don / subvention potentiel(le) ou moyen(ne)"] = [None]
        self.fondations["Telephone"] = [None]
        self.fondations["Mail"] = [None]
        self.fondations["Processus"] = [None]
        self.fondations["Janvier"] = [None]
        self.fondations["Fevrier"] = [None]
        self.fondations["Mars"] = [None]
        self.fondations["Avril"] = [None]
        self.fondations["Mai"] = [None]
        self.fondations["Juin"] = [None]
        self.fondations["Juillet"] = [None]
        self.fondations["Aout"] = [None]
        self.fondations["Septembre"] = [None]
        self.fondations["Octobre"] = [None]
        self.fondations["Novembre"] = [None]
        self.fondations["Decembre"] = [None]
        self.fondations["Libre"] = [None]
        self.fondations["Non mentionne"] = [None]

        self.zones_géographique = []
        self.champs_intervention = []

        self.cpt_site = 1
        self.cpt_click = 1
        self.cpt_block = 1
        self.global_cpt = 0

        self.missing_entries = []

        self.path_1 = None
        self.num = None

    # Exemple d’utilisation

    def add_champ(self):

        self.statut_2.clear()

        if self.champ.text() != "":
            self.champs_intervention.append(self.champ.text())
            self.statut_2.setText(
                f"Champ d'intervention {self.champ.text()} bien ajouté !!"
            )
            self.champ.clear()
        else:
            self.statut_2.setText(
                f"Veuillez entrer un champ d'intervention avant d'appuyer !!"
            )

    def add_zone(self):
        self.statut_2.clear()

        if self.zone.text() != "":
            self.zones_géographique.append(self.zone.text())
            self.statut_2.setText(f"Zone {self.zone.text()} bien ajoutée !!")
            self.zone.clear()
        else:
            self.statut_2.setText(
                f"Veuillez entrer une zone géographique avant d'appuyer !!"
            )

    def get_path(self):
        self.statut_2.clear()

        if self.path.text() != "":
            self.path_1 = self.path.text()
            self.statut_2.setText(
                f"Votre fichier sera créé dans {self.path_1}, vérifiez bien le chemin ..."
            )

        else:
            self.statut_2.setText(
                f"Veuillez entrer le chemin complet pour le dépot de votre ficher !!"
            )

    def get_num(self):
        self.statut_2.clear()

        if self.number.text() != "":
            self.num = self.number.text()
            try:
                int(self.num)
                self.statut_2.setText(
                    f"Le programme cherchera {self.num} fondations par champs et par zones ..."
                )
                self.number.clear()
            except Exception as e:
                self.statut_2.setText(f"Veuillez entrer un nombre avant d'appuyer !!")

        else:
            self.statut_2.setText(f"Veuillez entrer un nombre avant d'appuyer !!")

    def delete_champ(self):
        try:
            removed_item = self.champs_intervention[-1]
            self.champs_intervention.pop(-1)
            self.statut_2.setText(
                f"Champ d'intervention {removed_item} bien supprimé !!"
            )
        except Exception as e:
            self.statut_2.setText("Aucun champ d'intervention à supprimer !!")

    def delete_zone(self):
        try:
            removed_item = self.zones_géographique[-1]
            self.zones_géographique.pop(-1)
            self.statut_2.setText(f"Zone géographique {removed_item} bien supprimée !!")
        except Exception as e:
            self.statut_2.setText("Aucune zone à supprimer !!")

    def analyse_fondation(self, text):

        ## 1- Création des colonnes supplémentaires du dataset

        local_openai = LocalOpenAI()

        self.fondations.loc[self.global_cpt, "Fondations"] = (
            local_openai.extraction_nom_fondation(text)
        )
        self.fondations.loc[self.global_cpt, "Zones d'interventions"] = (
            local_openai.extraction_zone_géographique(text)
        )
        self.fondations.loc[self.global_cpt, "Informations cles"] = (
            local_openai.extraction_informations_cles(text),
        )
        self.fondations.loc[self.global_cpt, "Date butoire"] = (
            local_openai.extraction_date_butoire(text)
        )
        self.fondations.loc[self.global_cpt, "Type de financeur"] = (
            local_openai.extraction_type_de_financeur(text)
        )
        self.fondations.loc[self.global_cpt, "Nom de l'appel"] = (
            local_openai.extraction_nom_appel(text)
        )
        self.fondations.loc[self.global_cpt, "Champs d'intervention"] = (
            local_openai.extraction_champs_intervention(text)
        )
        self.fondations.loc[self.global_cpt, "Criteres cles"] = (
            local_openai.extraction_criteres_cles(text)
        )
        self.fondations.loc[self.global_cpt, "Parrainage"] = (
            local_openai.extraction_parrainage(text)
        )
        self.fondations.loc[
            self.global_cpt, "Don / subvention potentiel(le) ou moyen(ne)"
        ] = local_openai.extraction_don(text)

        self.fondations.loc[self.global_cpt, "Telephone"] = local_openai.extraction_tel(
            text
        )
        self.fondations.loc[self.global_cpt, "Mail"] = local_openai.extraction_mail(
            text
        )

        self.fondations.loc[self.global_cpt, "Janvier"] = (
            local_openai.extraction_janvier(text)
        )
        self.fondations.loc[self.global_cpt, "Fevrier"] = (
            local_openai.extraction_fevrier(text)
        )
        self.fondations.loc[self.global_cpt, "Mars"] = local_openai.extraction_mars(
            text
        )
        self.fondations.loc[self.global_cpt, "Avril"] = local_openai.extraction_avril(
            text
        )
        self.fondations.loc[self.global_cpt, "Mai"] = local_openai.extraction_mai(text)
        self.fondations.loc[self.global_cpt, "Juin"] = local_openai.extraction_juin(
            text
        )
        self.fondations.loc[self.global_cpt, "Juillet"] = (
            local_openai.extraction_juillet(text)
        )
        self.fondations.loc[self.global_cpt, "Aout"] = local_openai.extraction_aout(
            text
        )
        self.fondations.loc[self.global_cpt, "Septembre"] = (
            local_openai.extraction_septembre(text)
        )
        self.fondations.loc[self.global_cpt, "Octobre"] = (
            local_openai.extraction_octobre(text)
        )
        self.fondations.loc[self.global_cpt, "Novembre"] = (
            local_openai.extraction_novembre(text)
        )
        self.fondations.loc[self.global_cpt, "Decembre"] = (
            local_openai.extraction_décembre(text)
        )
        self.fondations.loc[self.global_cpt, "Libre"] = local_openai.extraction_libre(
            text
        )
        self.fondations.loc[self.global_cpt, "Non mentionne"] = (
            local_openai.extraction_mentionné(text)
        )

        ## 2- Affichage du dataset résultant et exportation

        # print(self.fondations)

        # self.fondations.to_excel(self.path_1, index=False)

    def run(self):

        def click_cookies(time):

            cpt_site = 1
            cpt_click = 1
            cpt_block = 1

            blocking_word = [
                "Google",
                "partner",
                "condition",
                "selection",
                "consent",
                "subscribe",
            ]

            item_cookies = [
                "accept",
                "valid",
                "allow",
                "agree",
                "confirm",
                "accord",
                "continu",
                "autorise",
                "compris",
                "thank",
                "non",
            ]
            try:
                sleep(time)

                print("-" * 70)
                print(f"Site {cpt_site} Treatment")
                cpt_site += 1

                try:

                    buttons = driver.find_elements(By.TAG_NAME, "button")
                    links = driver.find_elements(By.TAG_NAME, "a")

                    elements = buttons + links

                    for element in elements:
                        element_text = element.text.lower()
                        print("" * 8, f'\nElement "{element_text}" Treatment ')

                        previous_cpt = cpt_click
                        previous_cpt_block = cpt_block

                        for i in blocking_word:
                            if i.lower() in element_text:
                                cpt_block += 1
                                break

                        if cpt_block != previous_cpt_block:
                            continue

                        if element_text == "OK!":

                            element_class = element.get_attribute("class")
                            element_id = element.get_attribute("id")

                            if element_class:

                                try:
                                    driver.find_element(
                                        By.XPATH, f"//*[@class='{element_class}']"
                                    ).click()

                                    print(
                                        f"Class Click ! Current number of Click : {cpt_click}"
                                    )
                                    cpt_click += 1
                                    break

                                except Exception as e:
                                    print(f"An error {e} occured with the class click.")
                                    pass

                            elif element_id:

                                try:
                                    driver.find_element(
                                        By.XPATH, f"//*[@id='{element_id}']"
                                    ).click()
                                    print(
                                        f"Id Click ! Current number of Click : {cpt_click}"
                                    )
                                    cpt_click += 1
                                    break

                                except Exception as e:
                                    print(f"An error {e}  occured with the id click.")
                                    pass
                        else:
                            for item_cookie in item_cookies:

                                if previous_cpt < cpt_click:
                                    break

                                if item_cookie.lower() in element_text:
                                    # print(element_text)

                                    element_class = element.get_attribute("class")
                                    element_id = element.get_attribute("id")

                                    if element_class:

                                        try:
                                            driver.find_element(
                                                By.XPATH,
                                                f"//*[@class='{element_class}']",
                                            ).click()

                                            print(
                                                f"Class Click ! Current number of Click : {cpt_click}"
                                            )
                                            cpt_click += 1
                                            break
                                        except Exception as e:
                                            print(
                                                f"An error {e} occured with  class click."
                                            )
                                            pass

                                    elif element_id:
                                        try:
                                            driver.find_element(
                                                By.XPATH, f"//*[@id='{element_id}']"
                                            ).click()

                                            print(
                                                f"Id Click ! Current number of Click : {cpt_click}"
                                            )
                                            cpt_click += 1
                                            break

                                        except Exception as e:
                                            print(
                                                f"An error {e}  occured with id click."
                                            )
                                            pass

                            if previous_cpt < cpt_click:
                                break

                except Exception as e:
                    print(f"An error {e}  occurred in the loop.")
                    pass

            finally:
                print("\nLe code s'est bien déroulé")

        def search(query, nb):

            blocking_sites = [
                "google",
                "youtube",
                "linkedin",
                "wikipedia",
                "instagram",
                "twitter",
                "facebook",
                "service-public",
                "culture.gouv",
            ]

            result = []

            search_box = driver.find_element(By.NAME, "q")
            search_box.clear()
            search_box.send_keys(query)
            search_box.send_keys(Keys.RETURN)

            while True:
                # Récupérer le contenu HTML de la page
                html_content = driver.page_source

                # Utiliser BeautifulSoup pour analyser le HTML
                soup = BeautifulSoup(html_content, "html.parser")

                # Trouver toutes les balises <a> dans le contenu HTML
                all_links = soup.find_all("a")

                # Parcourir les liens et filtrer les URL
                for link in all_links:
                    href = link.get("href")
                    if href:
                        if href.startswith("https") and not any(
                            site in href.lower() for site in blocking_sites
                        ):
                            l = href.split("/")[2]
                            clean = "https://" + l
                            if clean not in result:
                                result.append(clean)

                # Faire défiler la page
                driver.execute_script("window.scrollBy(0, 2000);")
                sleep(2)
                if len(result) >= nb:  # Modifier le nombre d'URLs désirées
                    break

            # for url in result:
            # print(url)

            return result

        def get_text():
            try:
                texte = driver.find_element(By.TAG_NAME, "body").text
                texte = texte.replace("\n", " ")
                print(texte)
            except Exception as e:
                texte = None

            return texte

        self.missing_entries = []

        if self.champs_intervention == []:
            self.missing_entries.append("Champ")
        if self.zones_géographique == []:
            self.missing_entries.append("Zone")
        if self.path_1 == None:
            self.missing_entries.append("Chemin")
        if self.num == None:
            self.missing_entries.append("Nombre de fondations")

        if self.missing_entries != []:
            self.statut_2.setText(
                f"Veuillez renseigner toutes les informations indispensables suivantes : {self.missing_entries}"
            )
            return None
        else:

            self.statut_2.setText("Début de la recherche ...")

            driver = webdriver.Chrome()
            driver.maximize_window()
            driver.get("https://www.google.com")
            click_cookies(2)

            for zone in self.zones_géographique:

                for champ in self.champs_intervention:

                    print(
                        f"\nTraitement des fondations liées au sujet : {champ}  dans la zone géographique : {zone}"
                    )
                    query = f" Fondation {champ} en {zone}"
                    urls = search(query, int(self.num))

                    urls = urls[0 : (int(self.num))]
                    print(urls)

                    for url in urls:

                        driver.get(url)
                        click_cookies(7)
                        texte = get_text()
                        if texte == None:
                            pass
                        else:
                            self.fondations.loc[self.global_cpt, "Urls"] = url
                            self.fondations.loc[self.global_cpt, "Textes"] = texte
                            self.analyse_fondation(texte)
                            self.global_cpt += 1
                            self.fondations.to_excel(self.path_1, index=False)

                    driver.get("https://www.google.com")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.del_champ.setText(
            _translate("MainWindow", "Suppresion du dernier champ ajouté")
        )
        self.b_champ.setText(_translate("MainWindow", "Ajout champ d'intervention"))
        self.b_zone.setText(_translate("MainWindow", "Ajout zone géographique"))
        self.del_zone.setText(
            _translate("MainWindow", "Suppresion de la dernière zone ajoutée")
        )
        self.b_number.setText(
            _translate("MainWindow", "Nombre de fondations par recherches")
        )
        self.b_run.setText(_translate("MainWindow", "Lancer"))
        self.b_path.setText(
            _translate("MainWindow", "Ajout chemin complet de dépot de fichier")
        )
        self.L_statut.setText(_translate("MainWindow", "Statut de l'action enclenchée"))
        self.title.setText(
            _translate(
                "MainWindow",
                "Recherche et Structuration d'Opportunités de Financement pour les Associations",
            )
        )
        self.champ_2.setText(_translate("MainWindow", "KF-23"))
        self.champ_3.setText(_translate("MainWindow", "Matching App"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
